///<reference path="../reference.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Plottable;
(function (Plottable) {
    var ComponentContainer = (function (_super) {
        __extends(ComponentContainer, _super);
        function ComponentContainer() {
            _super.apply(this, arguments);
            /*
            * An abstract ComponentContainer class to encapsulate Table and ComponentGroup's shared functionality.
            * It will not do anything if instantiated directly.
            */
            this._components = [];
        }
        ComponentContainer.prototype._anchor = function (element) {
            var _this = this;
            _super.prototype._anchor.call(this, element);
            this._components.forEach(function (c) {
                return c._anchor(_this.content);
            });
            return this;
        };

        ComponentContainer.prototype._render = function () {
            this._components.forEach(function (c) {
                return c._render();
            });
            return this;
        };

        ComponentContainer.prototype._removeComponent = function (c) {
            var removeIndex = this._components.indexOf(c);
            if (removeIndex >= 0) {
                this._components.splice(removeIndex, 1);
                this._invalidateLayout();
            }
            return this;
        };

        ComponentContainer.prototype._addComponent = function (c, prepend) {
            if (typeof prepend === "undefined") { prepend = false; }
            if (c == null || this._components.indexOf(c) >= 0) {
                return false;
            }

            if (prepend) {
                this._components.unshift(c);
            } else {
                this._components.push(c);
            }
            c._parent = this;
            if (this._isAnchored) {
                c._anchor(this.content);
            }
            this._invalidateLayout();
            return true;
        };

        /**
        * Returns a list of components in the ComponentContainer
        *
        * @returns{Component[]} the contained Components
        */
        ComponentContainer.prototype.components = function () {
            return this._components.slice();
        };

        /**
        * Returns true iff the ComponentContainer is empty.
        *
        * @returns {boolean} Whether the calling ComponentContainer is empty.
        */
        ComponentContainer.prototype.empty = function () {
            return this._components.length === 0;
        };

        /**
        * Remove all components contained in the  ComponentContainer
        *
        * @returns {ComponentContainer} The calling ComponentContainer
        */
        ComponentContainer.prototype.removeAll = function () {
            // Calling c.remove() will mutate this._components because the component will call this._parent._removeComponent(this)
            // Since mutating an array while iterating over it is dangerous, we instead iterate over a copy generated by Arr.slice()
            this._components.slice().forEach(function (c) {
                return c.remove();
            });
            return this;
        };
        return ComponentContainer;
    })(Plottable.Component);
    Plottable.ComponentContainer = ComponentContainer;
})(Plottable || (Plottable = {}));
